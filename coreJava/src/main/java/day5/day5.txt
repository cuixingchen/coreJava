面向对象的编程思想核心：
一切皆是对象，对象是客观世界的一个具体事物。
把对象按照类型进行分类，就得到了类，类是一种概念上的抽象，客观世界中不存在类。
写代码时，写类，用代码时，用的是对象。

Student{
学号、姓名、年龄（特征、状态） 用属性描述特征
学习、写代码(行为)  用方法描述行为
}
Student{
  int id;
  String name;
  int age;
  public void study(String lesson){//描述学习过程}
}
属性格式：
 [修饰符] 属性类型 属性变量名 [= 初始值];
属性必须直接定义在类体{}中，属性有默认值，不赋初始值，有默认值。默认值 与 数组元素的默认值 规则一样。不是属性的变量 没有默认值。

方法格式：
[修饰符] 返回类型 方法名(参数列表) [throws Exception]{}
方法描述事物的行为过程，参数列表用于传入方法，返回类型用于方法传出结果。没有结果返回类型写void。

光有属性和方法无法创建对象，创建对象需要在类中定义构造方法(构造器、构造函数、构造)，格式：
 [修饰符] 类名(参数列表) [throws Exception]{}

构造名字必须类名，方法名可以随意；构造没有返回类型，方法有。一个类中，构造可以有多个，但参数列表必须不同。所有类都有构造，但不是所有构造都可以调用。Java构造的一个机制：
  如果程序员不写构造，系统会默认提供一个无参构造。
  如果程序员写构造了，系统不会提供默认无参构造。

 写类，在类中定义 属性、方法和构造，用 构造创建对象，对象. 调用属性和方法。

在编写方法时，如果遇到功能相似的多个方法，从方便调用的角度，采用方法重载。方法重载不会减少代码，对开发者没有影响。方法重载的原则：
功能相似的多个方法采用相同的方法名称，不同的参数列表，返回类型最好相同。
使调用者只需要记一个方法就可以完成相似功能。

多个构造自然形成构造重载。

为了保证 非常量的属性安全有效，采用封装。封装、继承和多态是面向对象三大基本特性。
封装步骤：
private 属性，隐藏属性，属性在类外无法访问。

提供 public的方法操作属性，一般是get/set方法。get方法读属性，set方法写属性。在set方法中对赋值加以条件判断。

构造中调 set 方法给属性赋值，不要直接赋值。

几乎所有的 非常量属性 都必须采用封装。



