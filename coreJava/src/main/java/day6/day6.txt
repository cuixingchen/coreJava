关键字this：
this代表的是本类的对象，有两种用法：this.  this()
this. 可以调用本类的属性和方法，this()可以调用本类构造。
this. 可以出现在本类中所有的非 static 的部分，this. 在没有重名的时候可以省略。
this()必须在本类构造的第一行出现。
this出现在方法中，代表的是 方法的调用对象。x.a();y.a();
如果a()中有this，分别代表x和y对象。
this出现在构造中，代表的是 正在构造的对象。
this不能出现在static的部分。

继承最初是为了代码复用，但不是所有的代码复用都采用继承
使用继承关系时，必须保证 逻辑上的 is a 关系。子类 is a 父类成立，才能使用继承。
继承用extends、implements体现。子类 extends 父类，子类 implements 父接口。子类 继承 父类和子接口继承父接口用extends，子类实现父接口用implements。
属性可以被继承，非私有的方法可以继承，构造不能继承。但子类在构造时，会调用父类的构造。
继承的好处：
 1 子类可以复用父类的代码，但现在用的不是很多。
 2 继承是多态的前提条件，没有继承就没有多态。

每个类只有一个直接父类，extends 后只能跟一个父类。java.lang.Object是所有类的父类。不写extends默认继承Object

super关键字用于继承时 代表父类，和this用法基本一样。
super可以用super.调用父类的属性和方法(权限允许)，super()调用直接父类的构造，如果 构造中没有写 this()、super()，系统默认加上super()。this()/super()只能出现一个，因为它们都必须放在构造的第一行。

protected子类可以继承，本类本包可以使用。protected专门为子类继承设计。

如果 子类继承的方法不适合子类的需要时，可以对继承的方法进行重写，达到覆盖父类方法的效果。重写要求：
  1 重写只发生在父子类之间(包括父接口)。
  2 重写时，必须采用相同的方法名称、参数列表和返回类型。 5.0以后支持返回子类的类型。
  3 重写时，访问权限不能变小。
  4 重写时不能抛出更大的异常。

多态，父类的引用指向子类的对象叫 类多态。
Pet p1 = new Cat();
Pet p2 = new Dog();
public void 养宠物(Pet p){}//支持传Cat/Dog
一个名称，多种形态，叫 多态。多态分 三类：
 1 基本类型的多态  double d = 2/2.0/2.0F;
   本质是自动的类型转换。
 2 方法多态，重载、重写。
 3 类多态(接口多态) 父类的引用指向子类的对象叫 类多态。

多态可以用于参数设计和方法的返回类型的设计，可以用父类的类型代表所有子类类型和父类自身类型。
类多态 是 拿子类的对象当父类使用。子类扩展的属性和方法不能直接使用，除非进行强制类型转换。父类中定义的属性和方法可以使用，如果子类对父类的方法进行了重写，非static方法调子类重写后的，static调父类重写前的。

java中引用类型的类型转换必须发生在父子类之间，子类可以自动转换成父类，父类可以强制类型转换成子类。但只有发生多态的父类引用才能成功转换。
Person p = new Person();//p没有sal，转换失败。
Person p = new Teacher();//p有sal，转换成功。
类型转换只是 换了一个 引用 而已。
Person p = new Teacher();
Teacher t = (Teacher)p;
p 还是 Person类型，换成引用t指向对象。



