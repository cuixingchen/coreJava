数组是同一类型数据的容器。
int[] arr = new int[5];
数组     不是数据，是数据载体，用来存放数据。
  arr是数组类型的变量
数组元素 数据，但元素有多个。
  arr[i] i取0-4，类型int
数组下标 数组元素在数组中所处的位置，从0开始
  arr[i] i就是数组下标/索引，取值0-(元素个数-1)
数组长度(元素个数) 在数组中可以存放的元素个数
arr.length就是数组长度

数组的动态初始化：
元素类型[] 变量名= new 元素类型[元素个数];
int[]       arr  = new  int[5];
本语句结束，数组ok，元素还需要赋值，只有默认值。
数字型数组默认值是不同精度的0或者0.0
布尔型数据默认false，char型数组默认\u0000.
所有引用类型元素 默认null
arr[0] = 95; arr[1] = 84;....arr[4] = 75;//不用循环的赋值
for(int i=0;i<arr.length;i++){//循环给元素赋值
    arr[i] = xx;
}
数组的静态初始化：
元素类型[] 变量名 = {元素1,元素2,...};
元素类型[] 变量名 = new 元素类型[]{元素1,元素2,...};
String[] arr = {"guan","zhang","zhao","ma","huang"};

动态初始化时，元素和数组的赋值有先后，静态初始化，元素和数组同时赋值.
元素个数多时，动态初始化，元素无规律并且不能输入，用静态初始化。

数组拷贝，用
System.arraycopy();

数组排序：
排序就是排好次序，分升序(从小到大)和降序(从大到小)。
主要排序方法：
 冒泡排序
   思路：相邻比较，大的放后面(前面比后面大，交换位置)，
一次循环确定当前最大的数放最后，下次循环倒数第二大。。
   int[] arr = {6,8,3,2,1,4,5,7};
 选择排序
   思路：每次找到最小值的下标，然后交换第一个元素和最小值下标元素。然后从第二个开始，继续找最小值下标。。
 插入排序
   思路：先认为第一元素有序，然后依次插入第2到第n个元素，每次插入必须保证前i个有序。(i从2到n递增)
 快速排序
   思路：
   6,8,3,2,1,4,5,7
a： 以第一个数做基准(可以随意选择，一般第一个)从最后找第一个比基准小的数字，交换基准和该数字
 5,8,3,2,1,4,6,7
b: 从前面找第一个比基准大的数字，交换基准和该数字
 5,6,3,2,1,4,8,7
 重复a b，直到找不到了为止。
 5,4,3,2,1,6,8,7
 此时，基准前面没有比它大的，后面没有比它小的，当前位置就是基准应该在的位置。
 同样的方法用于基准前面和后面两组数字，继续。。。
java API中已经写好了排序。


