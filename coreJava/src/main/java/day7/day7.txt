static代表静态，是属于类的，被所有对象共享，可以用类名. 调用，静态的东西(属性、方法、语句块、内部类)在类加载时完成处理，而不是在创建对象时处理。
当new 对象时、类名. 调用属性/方法时、Class.forName()时，会进行类加载，类只加载一次。

final可以修饰类、属性、方法、局部变量，final代表不可修改。final类 无法继承，final方法 不能重写。
Person p = new Person(); p.getMessage();
写一个Person子类Teacher，重写了getMessage();加了工资
Person p = new Teacher();p.getMessage();
final类 = 所有方法都是final的。
final 变量 不能二次赋值，但必须显式赋值一次。
final对于引用类型只对第一层起作用,final属性没有set方法,因为对于一个对象来说，构造只调一次，方法可以多次调用。

java常量用static final 修饰，一般 权限 定为public.

写银行账户类
(定期账户、活期账户)
账户类：
  金额、get、set方法、 计算利息的方法？
  定期、活期 两种写法？
  在账户类中 无法实现 计算利息的方法，抽象方法。用abstract修饰。
abstract可以修饰类或者方法，抽象类 有构造，但不能new 构造，抽象方法 格式：
  public abstract 返回类型 方法名(参数列表) 
  [throws Exception] ;
  {}叫方法体，是方法的实现，抽象方法没有方法体{}
  含有抽象方法的类 必须定义成 抽象类，反之 未必。
  抽象类的引用 指向的都是非抽象子类对象(多态)，抽象方法在执行时，一定是执行子类重写后的 非抽象方法。
abstract不能和static、final、private同时修饰方法。

在父类如果定义了抽象方法，子类必须按照父类定义的格式重写该方法。抽象方法 具备 规范性和强制性。

接口变相实现了多重继承，类可以实现多个接口(implements)。
接口在开发中主要用于制定各种规范。
接口 在大多数情况下可以看成一种特殊的抽象类。
接口和抽象类的区别：
 1 接口用interface，抽象类用class。
 2 接口实现多继承，抽象类单继承。
 3 接口中没有构造，抽象类有构造但不能new
 4 接口中所有属性都是public static final的常量。
 5 接口中所有方法都是public abstract的抽象方法。




